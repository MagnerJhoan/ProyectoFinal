/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import java.io.File; // Importa la clase File del paquete java.io para manejar archivos y directorios
import java.io.FileInputStream; // Importa la clase FileInputStream del paquete java.io para leer datos de un archivo
import java.io.FileOutputStream; // Importa la clase FileOutputStream del paquete java.io para escribir datos en un archivo
import java.io.IOException; // Importa la clase IOException del paquete java.io para manejar excepciones de entrada y salida de datos
import java.io.ObjectInputStream; // Importa la clase ObjectInputStream del paquete java.io para leer objetos desde un flujo de entrada
import java.io.ObjectOutputStream; // Importa la clase ObjectOutputStream del paquete java.io para escribir objetos en un flujo de salida
import java.time.LocalDateTime; // Importa la clase LocalDateTime del paquete java.time para representar fecha y hora
import java.time.format.DateTimeFormatter; // Importa la clase DateTimeFormatter del paquete java.time.format para formatear fechas y horas
import javax.swing.JOptionPane; // Importa la clase JOptionPane del paquete javax.swing para mostrar ventanas de diálogo

/**
 *
 * @author MAGNER
 */
/**
 * Clase RetiroIngles que representa la interfaz de retiro de dinero.
 */
public class RetiroIngles extends javax.swing.JFrame {
    public Principal principal = new Principal(); // Instancia de la clase Principal
    public String usuario = "null"; // Variable para almacenar el nombre de usuario
    public int numeroCuenta = 000; // Variable para almacenar el número de cuenta

    /**
     * Constructor de la clase Retiro.
     */
    public RetiroIngles() {
        initComponents(); // Inicializa los componentes de la interfaz gráfica
        setLocationRelativeTo(null); // Centra la ventana en la pantalla
    }
    
    /**
     * Constructor de la clase Retiro.
     * @param name El nombre de usuario.
     * @param numerocuenta El número de cuenta.
     */
    public RetiroIngles(String name, int numerocuenta){
        initComponents(); // Inicializa los componentes de la interfaz gráfica
        this.usuario = name; // Asigna el nombre de usuario
        this.numeroCuenta = numerocuenta; // Asigna el número de cuenta
        cargar(); // Carga los datos del cliente desde el archivo
    }
    
    /**
     * Método para cargar los datos del cliente desde el archivo.
     */
    public void cargar (){
        FileInputStream archivo = null; // Declara una variable para leer datos de un archivo
        ObjectInputStream convertidorarchivo = null; // Declara una variable para convertir datos desde un archivo

        try {
            archivo = new FileInputStream("C://Metodos//Cajero.txt"); // Abre el archivo para lectura
            convertidorarchivo = new ObjectInputStream(archivo); // Prepara el objeto para leer desde el archivo
            principal = (Principal) convertidorarchivo.readObject(); // Lee el objeto Principal desde el archivo y lo asigna a la instancia principal
        } catch (IOException ex) { // Captura la excepción en caso de error de entrada/salida
            File archivos = new File("C://Metodos//Cajero.txt"); // Crea un nuevo archivo si no se encuentra el archivo existente
        } catch (ClassNotFoundException cnfe) { // Captura la excepción en caso de no encontrar la clase principal
            cnfe.printStackTrace(); // Imprime la traza de la excepción
        }
    }
    
    /**
     * Método para actualizar la lista de clientes en el archivo.
     */
    private void actualizarLista() {
        try {
            FileOutputStream ficherosalida = new FileOutputStream("C://Metodos//Cajero.txt"); // Abre el archivo para escritura
            ObjectOutputStream convertidor = new ObjectOutputStream(ficherosalida); // Prepara el objeto para escribir en el archivo
            convertidor.writeObject(principal); // Escribe el objeto principal en el archivo
            convertidor.close(); // Cierra el flujo de escritura
            ficherosalida.close(); // Cierra el archivo
        } catch (IOException ex) { // Captura la excepción en caso de error de entrada/salida
            ex.printStackTrace(); // Imprime la traza de la excepción
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtRetiro = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 102));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 900));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ENTER THE AMOUNT TO WITHDRAW");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, 330, 40));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("RETREAT");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 170, 190, 40));

        txtRetiro.setBackground(new java.awt.Color(0, 51, 51));
        txtRetiro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtRetiro.setForeground(new java.awt.Color(255, 255, 255));
        txtRetiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRetiroActionPerformed(evt);
            }
        });
        txtRetiro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRetiroKeyTyped(evt);
            }
        });
        jPanel1.add(txtRetiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 330, 250, 40));

        jButton5.setBackground(new java.awt.Color(0, 51, 51));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("READY");
        jButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 400, 120, -1));

        jButton6.setBackground(new java.awt.Color(0, 51, 51));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("RETURN TO");
        jButton6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 450, 180, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("BANK CACHUPIN");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logf1nuevo.jpg"))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 450, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pngwing.com (4).png"))); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/f3.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Método invocado cuando se ingresa un texto en el campo de texto txtRetiro.
     */
    private void txtRetiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRetiroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRetiroActionPerformed
    /**
     * Método invocado cuando se presiona una tecla en el campo de texto txtRetiro.
     * Permite ingresar solo números y limita la longitud a 4 caracteres.
     */
    private void txtRetiroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRetiroKeyTyped
        char c = evt.getKeyChar();
        if (c < '0' || c > '9') evt.consume(); // Consume la tecla si no es un número
        if (txtRetiro.getText().length() >= 4) evt.consume(); // Consume la tecla si la longitud del texto es mayor o igual a 4 caracteres
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRetiroKeyTyped
    /**
     * Método invocado cuando se hace clic en el botón jButton5.
     * Realiza la operación de retiro de dinero.
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (!txtRetiro.getText().equals("")) { // Verifica si el campo de retiro no está vacío
            if (Double.parseDouble(txtRetiro.getText()) < (saldo(numeroCuenta))) { // Verifica si el monto a retirar es menor que el saldo disponible
                restarSaldo(Double.parseDouble(txtRetiro.getText())); // Realiza el retiro del saldo
                LocalDateTime ahora = LocalDateTime.now(); // Obtiene la fecha y hora actual
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"); // Define el formato de fecha y hora
                String fechaYHoraActual = ahora.format(formatter); // Formatea la fecha y hora actual
                Historia historia = new Historia(fechaYHoraActual, "Retiro", "-" + txtRetiro.getText(), null, 000000, saldo(numeroCuenta) + ""); // Crea un objeto Historia con los datos del retiro
                agregarHistoria(historia); // Agrega la historia al historial de la cuenta
                actualizarLista(); // Actualiza la lista de clientes en el archivo
                FinishIngles ventana = new FinishIngles(usuario, numeroCuenta); // Crea una instancia de la ventana de finalización
                ventana.setVisible(true); // Hace visible la ventana de finalización
                ventana.setLocationRelativeTo(null); // Centra la ventana de finalización en la pantalla

                FacturaIngles factura = new FacturaIngles(usuario, numeroCuenta, "Retiro", Double.parseDouble(txtRetiro.getText())); // Crea una instancia de la factura
                factura.setVisible(true); // Hace visible la factura
                factura.setLocationRelativeTo(null); // Centra la factura en la pantalla
                dispose(); // Cierra la ventana actual
            } else {
                JOptionPane.showMessageDialog(null, "Insufficient balance.", "Error", JOptionPane.INFORMATION_MESSAGE); // Muestra un mensaje de saldo insuficiente
            }
        } else {
            JOptionPane.showMessageDialog(null, "Enter the amount to withdraw.", "Error", JOptionPane.INFORMATION_MESSAGE); // Muestra un mensaje de ingreso de monto
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
    /**
     * Método invocado cuando se hace clic en el botón jButton6.
     * Abre la ventana del menú principal.
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        MenuIngles ventana = new MenuIngles(usuario, numeroCuenta); // Crea una instancia de la ventana del menú principal
        ventana.setVisible(true); // Hace visible la ventana del menú principal
        ventana.setLocationRelativeTo(null); // Centra la ventana del menú principal en la pantalla
        dispose(); // Cierra la ventana actual
    }//GEN-LAST:event_jButton6ActionPerformed
    /**
     * Método para agregar una historia al historial de una cuenta.
     * @param historia La historia a agregar.
     */
    public void agregarHistoria(Historia historia) {
        for (int i = 0; principal.getListaCuenta().size() > i; i++) { // Recorre la lista de cuentas
            if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) { // Compara el número de cuenta
                principal.getListaCuenta().get(i).getListaHistoria().add(historia); // Agrega la historia al historial de la cuenta
                break; // Sale del bucle
            }
        }
    }
    
    /**
     * Método para restar saldo de una cuenta.
     * @param saltoRetirado El monto a restar.
     */
    public void restarSaldo(double saltoRetirado) {
        for (int i = 0; principal.getListaCuenta().size() > i; i++) { // Recorre la lista de cuentas
            if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) { // Compara el número de cuenta
                principal.getListaCuenta().get(i).setSaldo(principal.getListaCuenta().get(i).getSaldo() - saltoRetirado); // Resta el saldo retirado
                break; // Sale del bucle
            }
        }
    }
     /**
     * Método para obtener el saldo de una cuenta.
     * @param numerocuenta El número de cuenta.
     * @return El saldo de la cuenta.
     */
    public double saldo(int numerocuenta) {
        double res = 0; // Inicializa el saldo como cero
        if (principal.getListaCuenta() != null) { // Verifica si la lista de cuentas no es nula
            for (int i = 0; principal.getListaCuenta().size() > i; i++) { // Recorre la lista de cuentas
                if (principal.getListaCuenta().get(i).getNumeroCuenta() == numerocuenta) { // Compara el número de cuenta
                    res = principal.getListaCuenta().get(i).getSaldo(); // Asigna el saldo de la cuenta
                    break; // Sale del bucle
                }
            }
        }
        return res; // Devuelve el saldo
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RetiroIngles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RetiroIngles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RetiroIngles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RetiroIngles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RetiroIngles().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtRetiro;
    // End of variables declaration//GEN-END:variables
}
