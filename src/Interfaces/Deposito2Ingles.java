/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import java.io.File; // Importa la clase File para manipulación de archivos
import java.io.FileInputStream; // Importa la clase FileInputStream para leer datos de un archivo
import java.io.FileOutputStream; // Importa la clase FileOutputStream para escribir datos en un archivo
import java.io.IOException; // Importa la clase IOException para manejo de excepciones de entrada/salida
import java.io.ObjectInputStream; // Importa la clase ObjectInputStream para leer objetos de un archivo
import java.io.ObjectOutputStream; // Importa la clase ObjectOutputStream para escribir objetos en un archivo
import java.time.LocalDateTime; // Importa la clase LocalDateTime para trabajar con fechas y horas
import java.time.format.DateTimeFormatter; // Importa la clase DateTimeFormatter para formatear fechas
/**
 *
 * @author MAGNER
 */
/**
 * Define la clase Deposito2Ingles que extiende de javax.swing.JFrame, que representa la ventana de depósito.
 * Contiene métodos para cargar y actualizar datos desde/hacia un archivo.
 */
public class Deposito2Ingles extends javax.swing.JFrame {

    // Variables de instancia
    public int numeroCuenta = 000; // Número de cuenta
    public Principal principal = new Principal(); // Instancia de la clase Principal
    public boolean dolares = false; // Indicador de depósito en dólares
    public boolean bolivianos = false; // Indicador de depósito en bolivianos
    public String usuario = "null"; // Nombre de usuario

    /**
     * Constructor de la clase Deposito2.
     * Inicializa los componentes de la interfaz y establece la posición de la ventana.
     */
    public Deposito2Ingles() {
        initComponents(); // Inicialización de componentes
        setLocationRelativeTo(null); // Establece la posición de la ventana en el centro de la pantalla
    }

    /**
     * Constructor de la clase Deposito2 que recibe el nombre de usuario, el número de cuenta y los indicadores de depósito en dólares y bolivianos como parámetros.
     * @param name Nombre de usuario
     * @param numerocuent Número de cuenta
     * @param dolar Indicador de depósito en dólares
     * @param boliviano Indicador de depósito en bolivianos
     */
    public Deposito2Ingles(String name, int numerocuent, boolean dolar, boolean boliviano) {
        initComponents(); // Inicialización de componentes
        this.usuario = name; // Asigna el nombre de usuario
        this.bolivianos = boliviano; // Asigna el indicador de depósito en bolivianos
        this.dolares = dolar; // Asigna el indicador de depósito en dólares
        this.numeroCuenta = numerocuent; // Asigna el número de cuenta
        cargar(); // Carga los datos desde el archivo
    }

    /**
     * Método que carga los datos desde un archivo.
     */
    public void cargar() {

        FileInputStream archivo = null; // Variable para leer datos de un archivo
        ObjectInputStream convertidorarchivo = null; // Variable que permite sacar datos del archivo

        try {
            archivo = new FileInputStream("C://Metodos//Cajero.txt"); // Abre el archivo para lectura
            convertidorarchivo = new ObjectInputStream(archivo); // Convierte el archivo a objetos
            principal = (Principal) convertidorarchivo.readObject(); // Asigna los datos al objeto principal
        } catch (IOException ex) { // Manejo de excepciones en caso de error de lectura
            File archivos = new File("C://Metodos//Cajero.txt"); // Crea un nuevo archivo si no existe
        } catch (ClassNotFoundException cnfe) { // Manejo de excepciones en caso de no encontrar la clase
            cnfe.printStackTrace(); // Imprime la traza de la excepción
        }
    }

    /**
     * Método que actualiza la lista de datos en el archivo.
     */
    private void actualizarLista() {
        try {
            FileOutputStream ficherosalida = new FileOutputStream("C://Metodos//Cajero.txt"); // Abre el archivo para escritura
            ObjectOutputStream convertidor = new ObjectOutputStream(ficherosalida); // Convierte objetos a bytes
            convertidor.writeObject(principal); // Escribe el objeto principal en el archivo
            convertidor.close(); // Cierra el convertidor
            ficherosalida.close(); // Cierra el archivo de salida
        } catch (IOException ex) { // Manejo de excepciones en caso de error de escritura
            ex.printStackTrace(); // Imprime la traza de la excepción
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        txtDeposito = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 0, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("INCOME");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 90, 30));

        jButton7.setBackground(new java.awt.Color(0, 51, 51));
        jButton7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("CONTINUE TO ");
        jButton7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, -1, -1));

        txtDeposito.setBackground(new java.awt.Color(0, 51, 51));
        txtDeposito.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtDeposito.setForeground(new java.awt.Color(255, 255, 255));
        txtDeposito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDepositoKeyTyped(evt);
            }
        });
        jPanel1.add(txtDeposito, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, 250, 30));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("DEPOSITS SECTION");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, -1, -1));

        jButton1.setBackground(new java.awt.Color(0, 51, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("RETURN TO");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 320, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logf1nuevo.jpg"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pngwing.com (4).png"))); // NOI18N
        jLabel4.setText("jLabel4");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(-290, 0, -1, 410));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/f3.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Método que se ejecuta al hacer clic en el botón "CONTINUAR".
     * Realiza el depósito según el tipo de moneda seleccionado.
     * @param evt Evento de acción
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
         // Si el depósito es en dólares
        if (dolares) {
            // Si la cuenta está en dólares
            if (verificarDolar()) {
                // Aumenta el saldo en la cantidad ingresada
                aumentarSaldo(Integer.parseInt(txtDeposito.getText()));
                // Registra la transacción en el historial
                Historia(txtDeposito.getText());
            } else {
                // Convierte el monto ingresado a dólares y aumenta el saldo
                aumentarSaldo(Integer.parseInt(txtDeposito.getText()) * (6.91));
                // Registra la transacción en el historial con la conversión
                Historia(redondear(Integer.parseInt(txtDeposito.getText()) * (6.91)) + "");
            }
        }
        // Si el depósito es en bolivianos
        else if (bolivianos) {
            // Si la cuenta está en dólares
            if (verificarDolar()) {
                // Convierte el monto ingresado a dólares y aumenta el saldo
                aumentarSaldo(Integer.parseInt(txtDeposito.getText()) / 6.91);
                // Registra la transacción en el historial con la conversión
                Historia(redondear(Integer.parseInt(txtDeposito.getText()) / 6.91) + "");
            } else {
                // Aumenta el saldo en la cantidad ingresada
                aumentarSaldo(Integer.parseInt(txtDeposito.getText()));
                // Registra la transacción en el historial
                Historia(txtDeposito.getText());
            }
        }
        // Actualiza la lista de cuentas en el archivo
        actualizarLista();
        // Abre la ventana de finalización del depósito
        FinishIngles ventana = new FinishIngles(usuario, numeroCuenta);
        ventana.setVisible(true);
        ventana.setLocationRelativeTo(null);
        // Abre la ventana de factura
        FacturaIngles factura = new FacturaIngles(usuario, numeroCuenta, "Deposito", Double.parseDouble(txtDeposito.getText()));
        factura.setVisible(true);
        factura.setLocationRelativeTo(null);
        // Cierra la ventana actual
        dispose();
    }//GEN-LAST:event_jButton7ActionPerformed
        /**
     * Método que redondea un número a tres decimales.
     * @param numero Número a redondear
     * @return Número redondeado
     */
    public double redondear(double numero) {
        double factor = Math.pow(10, 3); // Factor de redondeo
        double numeroMultiplicado = numero * factor; // Multiplica el número por 10^3
        long parteEntera = Math.round(numeroMultiplicado); // Redondea al entero más cercano
        return parteEntera / factor; // Divide el resultado por 10^3
    }
    /**
     * Método que se ejecuta al ingresar texto en el campo de depósito.
     * Limita la entrada a números y a un máximo de 4 dígitos.
     * @param evt Evento de teclado
     */
    private void txtDepositoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDepositoKeyTyped
        char c = evt.getKeyChar(); // Carácter ingresado
        if (c < '0' || c > '9') evt.consume(); // Permite solo dígitos numéricos
        if (txtDeposito.getText().length() >= 4) evt.consume(); // Limita la longitud del texto a 4 caracteres
    }//GEN-LAST:event_txtDepositoKeyTyped
    /**
     * Método que se ejecuta al hacer clic en el botón "REGRESAR".
     * Abre la ventana del menú principal.
     * @param evt Evento de acción
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MenuIngles ventana = new MenuIngles(usuario, numeroCuenta); // Instancia de la clase Menu
        ventana.setVisible(true); // Hace visible la ventana del menú principal
        ventana.setLocationRelativeTo(null); // Establece la posición de la ventana en el centro de la pantalla
        dispose(); // Cierra la ventana actual
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Método que registra la transacción en el historial.
     * @param monto Monto de la transacción
     */
    public void Historia(String monto) {
        // Obtiene la fecha y hora actual
        LocalDateTime ahora = LocalDateTime.now();
        // Formatea la fecha y hora
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        // Convierte la fecha y hora a una cadena formateada
        String fechaYHoraActual = ahora.format(formatter);
        // Crea una instancia de la clase Historia con la información de la transacción
        Historia historia = new Historia(fechaYHoraActual, "Deposito", "+" + monto, null, 000000, redondear(saldo(numeroCuenta)) + "");
        // Agrega la historia al historial de la cuenta
        agregarHistoria(historia);
    }

    /**
     * Método que obtiene el saldo de una cuenta.
     * @param numerocuenta Número de cuenta
     * @return Saldo de la cuenta
     */
    public double saldo(int numerocuenta) {
        double res = 0; // Saldo inicial
        // Recorre la lista de cuentas
        if (principal.getListaCuenta() != null) {
            for (int i = 0; principal.getListaCuenta().size() > i; i++) {
                // Busca la cuenta por su número
                if (principal.getListaCuenta().get(i).getNumeroCuenta() == numerocuenta) {
                    res = principal.getListaCuenta().get(i).getSaldo(); // Obtiene el saldo de la cuenta
                    break; // Sale del bucle
                }
            }
        }
        return res; // Devuelve el saldo
    }

    /**
     * Método que agrega una historia al historial de una cuenta.
     * @param historia Historia a agregar
     */
    public void agregarHistoria(Historia historia) {
        // Recorre la lista de cuentas
        for (int i = 0; principal.getListaCuenta().size() > i; i++) {
            // Busca la cuenta por su número
            if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) {
                // Agrega la historia al historial de la cuenta
                principal.getListaCuenta().get(i).getListaHistoria().add(historia);
                break; // Sale del bucle
            }
        }
    }

    /**
     * Método que verifica si una cuenta está en dólares.
     * @return true si la cuenta está en dólares, false en caso contrario
     */
    public boolean verificarDolar() {
        boolean res = false; // Resultado inicial
        // Recorre la lista de cuentas
        for (int i = 0; principal.getListaCuenta().size() > i; i++) {
            // Busca la cuenta por su número
            if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) {
                // Verifica si la moneda de la cuenta es dólares
                if (principal.getListaCuenta().get(i).getMoneda().equals("Dolares")) {
                    res = true; // La cuenta está en dólares
                    break; // Sale del bucle
                }
            }
        }
        return res; // Devuelve el resultado
    }

    /**
     * Método que aumenta el saldo de una cuenta.
     * @param saldoDepositado Saldo a depositar
     */
    public void aumentarSaldo(double saldoDepositado) {
        // Recorre la lista de cuentas
        for (int i = 0; principal.getListaCuenta().size() > i; i++) {
            // Busca la cuenta por su número
            if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) {
                // Aumenta el saldo de la cuenta
                principal.getListaCuenta().get(i).setSaldo(principal.getListaCuenta().get(i).getSaldo() + saldoDepositado);
                break; // Sale del bucle
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Deposito2Ingles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Deposito2Ingles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Deposito2Ingles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Deposito2Ingles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Deposito2Ingles().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtDeposito;
    // End of variables declaration//GEN-END:variables
}
