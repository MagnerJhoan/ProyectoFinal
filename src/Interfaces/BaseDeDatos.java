/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import java.io.File; // Importa la clase File del paquete java.io para manejar archivos
import java.io.FileInputStream; // Importa la clase FileInputStream del paquete java.io para leer archivos de entrada
import java.io.IOException; // Importa la clase IOException del paquete java.io para manejar excepciones de entrada/salida
import java.io.ObjectInputStream; // Importa la clase ObjectInputStream del paquete java.io para leer objetos de un flujo de entrada
import java.util.ArrayList; // Importa la clase ArrayList del paquete java.util para manejar listas dinámicas
import javax.swing.table.DefaultTableModel; // Importa la clase DefaultTableModel del paquete javax.swing.table para manejar el modelo de la tabla en Swing
// Define una clase BaseDeDatos que extiende JFrame de Swing
public class BaseDeDatos extends javax.swing.JFrame {
    // Declaración de un objeto modelo para la tabla
    public DefaultTableModel modelo = new DefaultTableModel();
    
    // Instancia de la clase Principal
    public Principal principal = new Principal();
    
    // Constructor de la clase BaseDeDatos
    public BaseDeDatos() {
        initComponents(); // Inicializa los componentes de la interfaz gráfica
        setLocationRelativeTo(null); // Centra la ventana en la pantalla
        
        cargar(); // Llama al método cargar para cargar los datos desde un archivo
        
        // Agrega las columnas a modelo de la tabla
        modelo.addColumn("Numero de cuenta");
        modelo.addColumn("Nombre Apellido");
        modelo.addColumn("Tipo de cuenta");
        modelo.addColumn("moneda");
        modelo.addColumn("Saldo ");
        
        llenarTabla(); // Llena la tabla con los datos cargados
    }

    // Método para cargar los datos desde un archivo
    public void cargar(){
        FileInputStream archivo = null; // Variable para leer datos de un archivo
        ObjectInputStream convertidorarchivo = null; // Variable para convertir datos del archivo a objetos

        try {
            archivo = new FileInputStream("C://Metodos//Cajero.txt"); // Abre el archivo para lectura
            convertidorarchivo = new ObjectInputStream(archivo); // Abre el archivo para leer objetos
            principal = (Principal)convertidorarchivo.readObject(); // Lee el objeto y lo asigna a la variable principal
        } catch (IOException ex) { // Manejo de excepción para errores de entrada/salida
            // Si el archivo no existe, se crea uno nuevo
            File archivos = new File ("C://Metodos//Cajero.txt");
        } catch (ClassNotFoundException cnfe) { // Manejo de excepción para clase no encontrada
            cnfe.printStackTrace(); // Imprime la traza de la excepción
        }
    }
    
    // Método para llenar la tabla con los datos cargados
    public void llenarTabla(){
        // Borra todos los elementos del modelo para evitar duplicados
        while(modelo.getRowCount() > 0){
            modelo.removeRow(0);
        } 
        
        // Carga los datos en un ArrayList
        ArrayList <DATOS> historias = cargarDatos();
        
        // Itera sobre los datos y los agrega a la tabla
        for(DATOS datos : historias){
            Object a[]= new Object[5];
            a[0]= datos.getNumeroCuenta();
            a[1]= datos.getNombreApellido();
            a[2]= datos.getTipoCuenta();
            a[3]= datos.getTipoMoneda();
            a[4]= datos.getSaldo();
            modelo.addRow(a); // Agrega una fila al modelo con los datos
        }
       
        jTable1.setModel(modelo); // Establece el modelo de la tabla
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        ACTUALIZAR = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 51, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(0, 51, 51));
        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 90, 710, 364));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("BASE DE DATOS ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, -1, 40));

        ACTUALIZAR.setBackground(new java.awt.Color(9, 62, 62));
        ACTUALIZAR.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ACTUALIZAR.setForeground(new java.awt.Color(255, 255, 255));
        ACTUALIZAR.setText("ACTUALIZAR");
        ACTUALIZAR.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ACTUALIZAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ACTUALIZARActionPerformed(evt);
            }
        });
        jPanel1.add(ACTUALIZAR, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 50, 140, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("X");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/f4.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 540));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ACTUALIZARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ACTUALIZARActionPerformed

        cargar();
        llenarTabla();

        // TODO add your handling code here:
    }//GEN-LAST:event_ACTUALIZARActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jLabel3MouseClicked
    public ArrayList<DATOS> cargarDatos(){
    // Método para cargar datos
    ArrayList <DATOS> res= new ArrayList<>(); // Se crea un ArrayList para almacenar datos
    for (int i = 0 ; principal.getListaCuenta().size()>i;i++){ // Itera sobre la lista de cuentas
            String numero=principal.getListaCuenta().get(i).getNumeroCuenta()+""; // Obtiene el número de cuenta como string
            String nombre=nombre(principal.getListaCuenta().get(i).getUsuario()); // Obtiene el nombre del usuario asociado a la cuenta
            String cuenta=principal.getListaCuenta().get(i).getTipoCuenta(); // Obtiene el tipo de cuenta
            String moneda=principal.getListaCuenta().get(i).getMoneda(); // Obtiene el tipo de moneda
            String saldo = principal.getListaCuenta().get(i).getSaldo()+""; // Obtiene el saldo como string
            DATOS datos = new DATOS(numero,nombre,cuenta,moneda,saldo); // Crea un objeto DATOS con la información obtenida
            res.add(datos); // Añade el objeto DATOS al ArrayList
    }
    return res; // Devuelve el ArrayList con los datos cargados
}

public String nombre (String usu){
    // Método para obtener el nombre de usuario
    String res =""; // Inicializa una cadena vacía para el resultado
    for (int i =0 ; principal.getListaCliente().size()>i ;i++){ // Itera sobre la lista de clientes
        if(principal.getListaCliente().get(i).getUsuario().equals(usu)){ // Comprueba si el usuario coincide
            res = principal.getListaCliente().get(i).getNombre()+" "+principal.getListaCliente().get(i).getApellido(); // Concatena el nombre y apellido del cliente
        }
    }
    return res; // Devuelve el nombre completo del usuario
}

public String moneda (String usu){
    // Método para obtener el tipo de moneda
    String res =""; // Inicializa una cadena vacía para el resultado
    for (int i = 0 ; principal.getListaCuenta().size()>i ;i++){ // Itera sobre la lista de cuentas
        if (principal.getListaCuenta().get(i).getUsuario().equals(usu)){ // Comprueba si el usuario coincide
            if (principal.getListaCuenta().get(i).getMoneda().equals("Dolares")){ // Comprueba si la moneda es dólares
                res = "Dolares"; // Establece la moneda como dólares
            } else {
                res = "Bolivianos"; // Establece la moneda como bolivianos
            }
        }
    }
    return res; // Devuelve el tipo de moneda
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseDeDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseDeDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseDeDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseDeDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BaseDeDatos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ACTUALIZAR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
