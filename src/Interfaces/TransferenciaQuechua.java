/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import java.io.File; // Importa la clase File del paquete java.io para manejar archivos y directorios
import java.io.FileInputStream; // Importa la clase FileInputStream del paquete java.io para leer datos de un archivo
import java.io.FileOutputStream; // Importa la clase FileOutputStream del paquete java.io para escribir datos en un archivo
import java.io.IOException; // Importa la clase IOException del paquete java.io para manejar excepciones de entrada y salida de datos
import java.io.ObjectInputStream; // Importa la clase ObjectInputStream del paquete java.io para leer objetos desde un flujo de entrada
import java.io.ObjectOutputStream; // Importa la clase ObjectOutputStream del paquete java.io para escribir objetos en un flujo de salida
import javax.swing.JOptionPane; // Importa la clase JOptionPane del paquete javax.swing para mostrar cuadros de diálogo
import java.time.LocalDate; // Importa la clase LocalDate del paquete java.time para representar una fecha sin hora
import java.time.LocalDateTime; // Importa la clase LocalDateTime del paquete java.time para representar fecha y hora
import java.time.format.DateTimeFormatter; // Importa la clase DateTimeFormatter del paquete java.time.format para formatear fechas y horas

/**
 *
 * @author MAGNER
 */
/**
 * Clase TransferenciaQuechua que representa la interfaz para realizar transferencias entre cuentas.
 */
public class TransferenciaQuechua extends javax.swing.JFrame {
     public int numeroCuenta=000; // Variable para almacenar el número de cuenta
    public String usuario = "null"; // Variable para almacenar el nombre de usuario
    public Principal principal =new Principal(); // Instancia de la clase Principal

    /**
     * Constructor de la clase Transferencia.
     */
    public TransferenciaQuechua() {
        initComponents(); // Inicializa los componentes de la interfaz gráfica
        setLocationRelativeTo(null); // Centra la ventana en la pantalla
    }
    
    /**
     * Constructor de la clase Transferencia.
     * @param name El nombre de usuario.
     * @param numeroCuenta El número de cuenta.
     */
    public TransferenciaQuechua(String name,int numeroCuenta){
        initComponents(); // Inicializa los componentes de la interfaz gráfica
        this.usuario=name; // Asigna el nombre de usuario
        this.numeroCuenta=numeroCuenta; // Asigna el número de cuenta
        cargar(); // Carga los datos del cliente desde el archivo
    }
    
    /**
     * Método para cargar los datos del cliente desde el archivo.
     */
    public void cargar (){
       FileInputStream archivo = null; // Variable para leer datos de un archivo
        ObjectInputStream convertidorarchivo = null; // Variable para convertir datos desde un archivo

        try {
            archivo = new FileInputStream("C://Metodos//Cajero.txt"); // Abre el archivo para lectura
            convertidorarchivo = new ObjectInputStream(archivo); // Prepara el objeto para leer desde el archivo
            principal= (Principal)convertidorarchivo.readObject(); // Lee el objeto Principal desde el archivo y lo asigna a la instancia principal
        } catch (IOException ex) { // Captura la excepción en caso de error de entrada/salida
            File archivos = new File("C://Metodos//Cajero.txt"); // Crea un nuevo archivo si no se encuentra el archivo existente
        } catch (ClassNotFoundException cnfe) { // Captura la excepción en caso de no encontrar la clase principal
            cnfe.printStackTrace(); // Imprime la traza de la excepción
        }
    }

    /**
     * Método para actualizar la lista de cuentas en el archivo.
     */
    private void actualizarLista() {
        try {
            FileOutputStream ficherosalida = new FileOutputStream ("C://Metodos//Cajero.txt"); // Abre el archivo para escritura
            ObjectOutputStream convertidor = new ObjectOutputStream (ficherosalida); // Prepara el objeto para escribir en el archivo
            convertidor.writeObject(principal); // Escribe el objeto principal en el archivo
            convertidor.close(); // Cierra el objeto para escritura
            ficherosalida.close(); // Cierra el archivo de salida
        } catch (IOException ex) { // Captura la excepción en caso de error de entrada/salida
            ex.printStackTrace(); // Imprime la traza de la excepción
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtSaldoTransferir = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        txtCuentaTransferir = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("QILLQANA RIQSIY");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 160, 30));

        txtSaldoTransferir.setBackground(new java.awt.Color(0, 51, 51));
        txtSaldoTransferir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtSaldoTransferir.setForeground(new java.awt.Color(255, 255, 255));
        txtSaldoTransferir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSaldoTransferirKeyTyped(evt);
            }
        });
        jPanel1.add(txtSaldoTransferir, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 370, 40));

        jButton7.setBackground(new java.awt.Color(0, 51, 51));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("ARI");
        jButton7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 480, 70, 30));

        txtCuentaTransferir.setBackground(new java.awt.Color(0, 51, 51));
        txtCuentaTransferir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtCuentaTransferir.setForeground(new java.awt.Color(255, 255, 255));
        txtCuentaTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCuentaTransferirActionPerformed(evt);
            }
        });
        txtCuentaTransferir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCuentaTransferirKeyTyped(evt);
            }
        });
        jPanel1.add(txtCuentaTransferir, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 370, 40));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("WASIYKUYKUNA ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, -1, 40));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("QULLQI WASIYKUYKUNATA");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 250, 30));

        jButton8.setBackground(new java.awt.Color(0, 51, 51));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("QHIPANAY");
        jButton8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, 120, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("BANKU CACHUPIN");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logf1nuevo.jpg"))); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 430, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pngwing.com (4).png"))); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/f3.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents
     public double redondear(double numero) {
        // Multiplica el número por 10^digitos para desplazar los dígitos decimales
        double factor = Math.pow(10, 3);
        double numeroMultiplicado = numero * factor;

        // Redondea al entero más cercano
        long parteEntera = Math.round(numeroMultiplicado);

        // Divide el resultado por 10^digitos para obtener el número redondeado
        return parteEntera / factor;
    }
     /**
     * Método invocado cuando se hace clic en el botón para realizar la transferencia.
     * Realiza la transferencia de saldo entre cuentas y registra la transacción en el historial.
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
         if(!txtCuentaTransferir.getText().equals("")&&!txtSaldoTransferir.getText().equals("")){
            if (cuentaExiste(Integer.parseInt(txtCuentaTransferir.getText()))){
                if(saldo(numeroCuenta) >= (Double.parseDouble(txtSaldoTransferir.getText()))){
                    transferirSaldo(Integer.parseInt(txtCuentaTransferir.getText()),Double.parseDouble(txtSaldoTransferir.getText()));
                    historias(Integer.parseInt(txtCuentaTransferir.getText()),Double.parseDouble(txtSaldoTransferir.getText()));
                    actualizarLista();
                    FinishQuechua ventana = new FinishQuechua(usuario,numeroCuenta);
                    ventana.setVisible(true);
                    ventana.setLocationRelativeTo(null);
                    FacturaQuechua factura = new FacturaQuechua(usuario,numeroCuenta,"Transeferencia",Double.parseDouble(txtSaldoTransferir.getText()));
                    factura.setVisible(true);
                    factura.setLocationRelativeTo(null);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "Rikch'a qullqi ñawi", "llamk'ay", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ripuqqa mana qillqay", "llamk'ay", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Llanch'iqmi tukuy p'itiq kamachiqta munanki, yachaykama", "llamk'ay", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton7ActionPerformed
    /**
     * Método invocado cuando se hace clic en el botón para regresar al menú principal.
     * Abre la ventana del menú principal y cierra la ventana actual.
     */
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        MenuQuechua ventana = new MenuQuechua(usuario,numeroCuenta); // Crea una instancia de la ventana del menú principal
        ventana.setVisible(true); // Hace visible la ventana del menú principal
        ventana.setLocationRelativeTo(null); // Centra la ventana del menú principal en la pantalla
        dispose(); // Cierra la ventana actual
    }//GEN-LAST:event_jButton8ActionPerformed

    private void txtCuentaTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCuentaTransferirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCuentaTransferirActionPerformed
    /**
     * Método invocado cuando se presiona una tecla en el campo de texto para el número de cuenta a transferir.
     * Permite ingresar solo números y limita la cantidad de dígitos.
     */
    private void txtCuentaTransferirKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCuentaTransferirKeyTyped
         char c = evt.getKeyChar(); // Obtiene el carácter presionado
        if( c < '0'|| c>'9'  ) evt.consume(); // Si el carácter no es un número, consume el evento
        if (txtCuentaTransferir.getText().length() >= 9) evt.consume(); // Limita la longitud del texto a 9 caracteres
    
    }//GEN-LAST:event_txtCuentaTransferirKeyTyped
    /**
     * Método invocado cuando se presiona una tecla en el campo de texto para la cantidad a transferir.
     * Permite ingresar solo números y limita la cantidad de dígitos.
     */
    private void txtSaldoTransferirKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSaldoTransferirKeyTyped
              char c = evt.getKeyChar(); // Obtiene el carácter presionado
        if( c < '0'|| c>'9'  ) evt.consume(); // Si el carácter no es un número, consume el evento
        if (txtSaldoTransferir.getText().length() >= 5) evt.consume(); // Limita la longitud del texto a 5 caracteres
   
    }//GEN-LAST:event_txtSaldoTransferirKeyTyped
     public void historias(int numeroCuentaTransferir, double saldoTransferir) {
    // Crear instancias de Historia para el emisor y el receptor
    Historia historiaEmisor = new Historia();
    Historia historiaReceptor = new Historia();
    
    // Obtener la fecha y hora actual
    LocalDateTime ahora = LocalDateTime.now();
    // Definir el formato de fecha y hora
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    // Formatear la fecha y hora actual
    String fechaYHoraActual = ahora.format(formatter);
    
    // Recorrer la lista de cuentas
    for (int i = 0; principal.getListaCuenta().size() > i; i++) {
        // Verificar si la cuenta actual es la cuenta del emisor
        if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuentaTransferir) {
            // Recorrer la lista de cuentas nuevamente para encontrar la cuenta del receptor
            for (int j = 0; principal.getListaCuenta().size() > j; j++) {
                // Verificar si la cuenta actual es la cuenta del receptor
                if (principal.getListaCuenta().get(j).getNumeroCuenta() == numeroCuenta) {
                    // Verificar si ambas cuentas son en dólares
                    if (verificarDolar(numeroCuenta)) {
                        if (verificarDolar(numeroCuentaTransferir)) {
                            // Crear la historia para el emisor
                            historiaEmisor = new Historia(fechaYHoraActual, "Transaccion", "-" + txtSaldoTransferir.getText(), nombreCliente(Integer.parseInt(txtCuentaTransferir.getText())), Integer.parseInt(txtCuentaTransferir.getText()), redondear(saldo(numeroCuenta)) + "");
                            // Crear la historia para el receptor
                            historiaReceptor = new Historia(fechaYHoraActual, "Transaccion", "+" + txtSaldoTransferir.getText(), nombreCliente(numeroCuenta), numeroCuenta, redondear(saldo(Integer.parseInt(txtCuentaTransferir.getText()))) + "");
                        } else {
                            // Convertir el saldo a dólares
                            double saldo = saldoTransferir * 6.91;
                            saldo = redondear(saldo);
                            // Crear la historia para el emisor
                            historiaEmisor = new Historia(fechaYHoraActual, "Transaccion", "-" + txtSaldoTransferir.getText(), nombreCliente(Integer.parseInt(txtCuentaTransferir.getText())), Integer.parseInt(txtCuentaTransferir.getText()), redondear(saldo(numeroCuenta)) + "");
                            // Crear la historia para el receptor
                            historiaReceptor = new Historia(fechaYHoraActual, "Transaccion", "+" + saldo, nombreCliente(numeroCuenta), numeroCuenta, redondear(saldo(Integer.parseInt(txtCuentaTransferir.getText()))) + "");
                        }
                    } else {
                        if (verificarDolar(numeroCuentaTransferir)) {
                            // Convertir el saldo a la moneda local
                            double saldo2 = saldoTransferir / 6.91;
                            saldo2 = redondear(saldo2);
                            // Crear la historia para el emisor
                            historiaEmisor = new Historia(fechaYHoraActual, "Transaccion", "-" + txtSaldoTransferir.getText(), nombreCliente(Integer.parseInt(txtCuentaTransferir.getText())), Integer.parseInt(txtCuentaTransferir.getText()), redondear(saldo(numeroCuenta)) + "");
                            // Crear la historia para el receptor
                            historiaReceptor = new Historia(fechaYHoraActual, "Transaccion", "+" + saldo2, nombreCliente(numeroCuenta), numeroCuenta, redondear(saldo(Integer.parseInt(txtCuentaTransferir.getText()))) + "");
                        } else {
                            // Crear la historia para el emisor
                            historiaEmisor = new Historia(fechaYHoraActual, "Transaccion", "-" + txtSaldoTransferir.getText(), nombreCliente(Integer.parseInt(txtCuentaTransferir.getText())), Integer.parseInt(txtCuentaTransferir.getText()), redondear(saldo(numeroCuenta)) + "");
                            // Crear la historia para el receptor
                            historiaReceptor = new Historia(fechaYHoraActual, "Transaccion", "+" + txtSaldoTransferir.getText(), nombreCliente(numeroCuenta), numeroCuenta, redondear(saldo(Integer.parseInt(txtCuentaTransferir.getText()))) + "");
                        }
                    }
                }
            }
        }
    }
    // Agregar las historias a las cuentas respectivas
    agregarHistoria(historiaEmisor, historiaReceptor, Integer.parseInt(txtCuentaTransferir.getText()));
}

// Obtener el nombre del cliente dado un número de cuenta
public String nombreCliente(int numerocuentaCliente) {
    String res = "";
    // Recorrer la lista de cuentas
    for (int i = 0; principal.getListaCuenta().size() > i; i++) {
        // Verificar si la cuenta actual coincide con el número de cuenta buscado
        if (principal.getListaCuenta().get(i).getNumeroCuenta() == numerocuentaCliente) {
            // Obtener el usuario asociado a la cuenta
            String usuarioBuscado = principal.getListaCuenta().get(i).getUsuario();
            // Buscar el nombre del cliente correspondiente al usuario
            for (int j = 0; principal.getListaCliente().size() > j; j++) {
                // Verificar si se encuentra el usuario
                if (principal.getListaCliente().get(j).getUsuario().equals(usuarioBuscado)) {
                    // Obtener el nombre completo del cliente
                    res = principal.getListaCliente().get(j).getNombre() + " " + principal.getListaCliente().get(j).getApellido();
                    break;
                }
            }
        }
    }
    return res;
}

// Agregar historias a las cuentas involucradas en la transferencia
public void agregarHistoria(Historia historiaEmisor, Historia historiaReceptor, int numeroCuentaTransferir) {
    // Recorrer la lista de cuentas
    for (int i = 0; principal.getListaCuenta().size() > i; i++) {
        // Verificar si la cuenta actual es la cuenta del receptor
        if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuentaTransferir) {
            // Recorrer la lista de cuentas nuevamente para encontrar la cuenta del emisor
            for (int j = 0; principal.getListaCuenta().size() > j; j++) {
                // Verificar si la cuenta actual es la cuenta del emisor
                if (principal.getListaCuenta().get(j).getNumeroCuenta() == numeroCuenta) {
                    // Agregar las historias a las listas de historias de las cuentas involucradas
                    principal.getListaCuenta().get(i).getListaHistoria().add(historiaReceptor);
                    principal.getListaCuenta().get(j).getListaHistoria().add(historiaEmisor);
                    break;
                }
            }
        }
    }
}

// Transferir saldo entre dos cuentas
public void transferirSaldo(int numeroCuentaTransferir, double saldoTransferir) {
    // Recorrer la lista de cuentas
    for (int i = 0; principal.getListaCuenta().size() > i; i++) {
        // Verificar si la cuenta actual es la cuenta del emisor
        if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuentaTransferir) {
            // Recorrer la lista de cuentas nuevamente para encontrar la cuenta del receptor
            for (int j = 0; principal.getListaCuenta().size() > j; j++) {
                // Verificar si la cuenta actual es la cuenta del receptor
                if (principal.getListaCuenta().get(j).getNumeroCuenta() == numeroCuenta) {
                    // Verificar si ambas cuentas son en dólares
                    if (verificarDolar(numeroCuenta)) {
                        if (verificarDolar(numeroCuentaTransferir)) {
                            // Actualizar los saldos de ambas cuentas
                            principal.getListaCuenta().get(i).setSaldo(principal.getListaCuenta().get(i).getSaldo() + saldoTransferir);
                            principal.getListaCuenta().get(j).setSaldo(principal.getListaCuenta().get(j).getSaldo() - saldoTransferir);
                        } else {
                            // Convertir el saldo a dólares
                            double saldo = saldoTransferir * 6.91;
                            principal.getListaCuenta().get(i).setSaldo(principal.getListaCuenta().get(i).getSaldo() + saldo);
                            principal.getListaCuenta().get(j).setSaldo(principal.getListaCuenta().get(j).getSaldo() - saldoTransferir);
                        }
                    } else {
                        if (verificarDolar(numeroCuentaTransferir)) {
                            // Convertir el saldo a la moneda local
                            double saldo = saldoTransferir / 6.91;
                            principal.getListaCuenta().get(i).setSaldo(principal.getListaCuenta().get(i).getSaldo() + saldo);
                            principal.getListaCuenta().get(j).setSaldo(principal.getListaCuenta().get(j).getSaldo() - saldoTransferir);
                        } else {
                            // Actualizar los saldos de ambas cuentas
                            principal.getListaCuenta().get(i).setSaldo(principal.getListaCuenta().get(i).getSaldo() + saldoTransferir);
                            principal.getListaCuenta().get(j).setSaldo(principal.getListaCuenta().get(j).getSaldo() - saldoTransferir);
                        }
                    }
                }
            }
        }
    }
}

// Verificar si una cuenta utiliza dólares como moneda
public boolean verificarDolar(int numerocuenta) {
    boolean res = false;
    // Recorrer la lista de cuentas
    for (int i = 0; principal.getListaCuenta().size() > i; i++) {
        // Verificar si la cuenta actual utiliza dólares
        if (principal.getListaCuenta().get(i).getNumeroCuenta() == numerocuenta) {
            if (principal.getListaCuenta().get(i).getMoneda().equals("Dolares")) {
                res = true;
                break;
            }
        }
    }
    return res;
}

// Obtener el saldo de una cuenta
public double saldo(int numeroCuenta) {
    double res = 0;
    // Verificar si la lista de cuentas no es nula
    if (principal.getListaCuenta() != null) {
        // Recorrer la lista de cuentas
        for (int i = 0; principal.getListaCuenta().size() > i; i++) {
            // Verificar si la cuenta actual coincide con el número de cuenta
            if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) {
                // Obtener el saldo de la cuenta
                res = principal.getListaCuenta().get(i).getSaldo();
                break;
            }
        }
    }
    return res;
}

// Verificar si una cuenta existe
public boolean cuentaExiste(int numeroCuenta) {
    boolean res = false;
    // Verificar si la lista de cuentas no es nula
    if (principal.getListaCuenta() != null) {
        // Recorrer la lista de cuentas
        for (int i = 0; principal.getListaCuenta().size() > i; i++) {
            // Verificar si la cuenta actual coincide con el número de cuenta
            if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) {
                res = true;
                break;
            }
        }
    }
    return res;
}
/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransferenciaIngles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransferenciaIngles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransferenciaIngles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransferenciaIngles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransferenciaIngles().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtCuentaTransferir;
    private javax.swing.JTextField txtSaldoTransferir;
    // End of variables declaration//GEN-END:variables
}
